/*
 *
 *      Copyright (c) 2018-2099, lipengjun All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 *  this list of conditions and the following disclaimer.
 *  Redistributions in binary form must reproduce the above copyright
 *  notice, this list of conditions and the following disclaimer in the
 *  documentation and/or other materials provided with the distribution.
 *  Neither the name of the fly2you.cn developer nor the names of its
 *  contributors may be used to endorse or promote products derived from
 *  this software without specific prior written permission.
 *  Author: lipengjun (939961241@qq.com)
 *
 */
package ${package}.service;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.IService;
import ${package}.entity.${className}Entity;

import java.util.List;
import java.util.Map;

/**
 * ${comments}Service接口
 *
 * @author ${author}
 * @since ${datetime}
 */
public interface ${className}Service extends IService<${className}Entity> {

    /**
     * 查询所有列表
     *
     * @param params 查询参数
     * @return List
     */
    List<${className}Entity> queryAll(Map<String, Object> params);

    /**
     * 查询所有列表
     *
     * @param queryWrapper 查询参数
     * @return List
     */
    List<${className}Entity> queryAllByWrapper(QueryWrapper<${className}Entity> queryWrapper);

    /**
     * 分页查询${comments}
     *
     * @param params 查询参数
     * @return Page
     */
    Page<${className}Entity> queryPage(Map<String, Object> params);

    /**
     * 新增${comments}
     *
     * @param ${classname} ${comments}
     * @return 新增结果
     */
    boolean add(${className}Entity ${classname});

    /**
     * 根据主键更新${comments}
     *
     * @param ${classname} ${comments}
     * @return 更新结果
     */
    boolean update(${className}Entity ${classname});

    /**
     * 根据主键删除${comments}
     *
     * @param ${pk.attrname} ${pk.attrname}
     * @return 删除结果
     */
    boolean delete(${pk.attrType} ${pk.attrname});

    /**
     * 根据主键批量删除
     *
     * @param ${pk.attrname}s ${pk.attrname}s
     * @return 删除结果
     */
    boolean deleteBatch(${pk.attrType}[] ${pk.attrname}s);
}
